# Ruby-Box2D : Yet another Box2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/box2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Box2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct


  # Function

  def self.setup_id_inline_symbols(output_error = false)
    symbols = [
      :b2StoreBodyId,
      :b2LoadBodyId,
      :b2StoreShapeId,
      :b2LoadShapeId,
      :b2StoreChainId,
      :b2LoadChainId,
      :b2StoreJointId,
      :b2LoadJointId,
    ]
    apis = {
      :b2StoreBodyId => :StoreBodyId,
      :b2LoadBodyId => :LoadBodyId,
      :b2StoreShapeId => :StoreShapeId,
      :b2LoadShapeId => :LoadShapeId,
      :b2StoreChainId => :StoreChainId,
      :b2LoadChainId => :LoadChainId,
      :b2StoreJointId => :StoreJointId,
      :b2LoadJointId => :LoadJointId,
    }
    args = {
      :b2StoreBodyId => [BodyId.by_value],
      :b2LoadBodyId => [:ulong_long],
      :b2StoreShapeId => [ShapeId.by_value],
      :b2LoadShapeId => [:ulong_long],
      :b2StoreChainId => [ChainId.by_value],
      :b2LoadChainId => [:ulong_long],
      :b2StoreJointId => [JointId.by_value],
      :b2LoadJointId => [:ulong_long],
    }
    retvals = {
      :b2StoreBodyId => :ulong_long,
      :b2LoadBodyId => BodyId.by_value,
      :b2StoreShapeId => :ulong_long,
      :b2LoadShapeId => ShapeId.by_value,
      :b2StoreChainId => :ulong_long,
      :b2LoadChainId => ChainId.by_value,
      :b2StoreJointId => :ulong_long,
      :b2LoadJointId => JointId.by_value,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

